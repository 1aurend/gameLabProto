var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import _draw from './draw.js';
import snake from './snake.js';
import isCollision from './is-collision.js';
import apple from './apple.js';
import eatApple from './eat-apple.js';
import menu from './menu.js';
import constants from './constants.js';
import styles from './styles.js';

var states = constants.states,
    difficulty = constants.difficulty;


var game = {
  numberOfPlayers: 1,
  gameOver: true,
  speed: 2,
  fps: 1000 / 30,
  countdown: 3,
  canvasSize: 300,
  board: {
    x: 0,
    y: 30,
    width: 300,
    height: 270 // canvasSize - board.y
  },
  startTime: null,
  time: 0,
  lastInterval: 0,
  snakes: [],
  apples: [],
  score: 0,
  highScore: 0,
  state: states.menuPlayers,
  currentMenu: 'playAgain'
};

function newGame() {
  game.snakes = [];
  game.apples = [];
  game.gameOver = false;
  game.state = states.game;
  game.score = 0;
  game.startTime = null;
}

function gameOver() {
  game.gameOver = true;
  game.state = states.gameOver;

  if (game.score > game.highScore) {
    game.highScore = game.score;
    game.currentMenu = 'playAgain';
  }
}

var NilssongamesSnake = function (_React$Component) {
  _inherits(NilssongamesSnake, _React$Component);

  function NilssongamesSnake() {
    _classCallCheck(this, NilssongamesSnake);

    var _this = _possibleConstructorReturn(this, (NilssongamesSnake.__proto__ || Object.getPrototypeOf(NilssongamesSnake)).call(this));

    _this.loop = _this.loop.bind(_this);
    return _this;
  }

  _createClass(NilssongamesSnake, [{
    key: 'init',
    value: function init() {
      game.state = states.menuPlayers;
      requestAnimationFrame(this.loop);
    }
  }, {
    key: 'update',
    value: function update() {
      // All logic happens here, no canvas rendering

      if (game.state !== states.game) {
        return;
      }

      while (game.snakes.length < game.numberOfPlayers) {
        // TODO: do forEach numberofplayers and send an index to get different starting coordinates
        game.snakes.push(new snake(game));
      }

      if (!game.apples.length && game.numberOfPlayers === 1) {
        game.apples.push(new apple(game));
      }

      if (game.countdown - parseInt(game.time / 1000) > 0) {
        //start game only after countdown is finished
        return;
      }

      // Start moving the snake(s)
      game.snakes.forEach(function (snake) {
        if (isCollision(snake, game) || snake.gameOver) {
          snake.gameOver = true;
          gameOver();
          return;
        }

        snake.move();

        if (game.snakes.length > 1) {
          // if more than one snake, ignore apples, and just grow the snake every move
          snake.grow();
          return;
        }

        game.apples.forEach(function (appleObj, i) {
          if (eatApple(snake, appleObj)) {
            game.apples[i] = new apple(game);
            snake.grow();
            game.score += game.speed;
          }
        });
      });
    }
  }, {
    key: 'draw',
    value: function draw() {
      // Render the canvas only, no variables should change
      var canvasSize = game.canvasSize;

      var context = this.canvas.getContext('2d');

      context.clearRect(0, 0, canvasSize, canvasSize);
      _draw.score(context, game);

      if (game.state === states.menuPlayers || game.state === states.menuDifficulty) {
        menu.draw(context, game);
        return;
      }

      game.apples.forEach(function (apple) {
        apple.draw(context);
      });

      game.snakes.forEach(function (snake) {
        snake.draw(context);
      });

      if (game.state === states.gameOver) {
        _draw.gameOver(context, game.canvasSize);
        menu.draw(context, game);
      }

      _draw.countdown(context, game);
    }
  }, {
    key: 'loop',
    value: function loop(time) {
      var fps = game.fps,
          speed = game.speed;

      time = parseInt(time);

      if (!game.startTime) {
        game.startTime = time;
        game.lastInterval = time - game.startTime;
      }

      game.time = time - game.startTime;

      if (game.time >= game.lastInterval + fps * (10 / speed)) {
        game.lastInterval = game.time;
        this.update();
        this.draw();
      }

      requestAnimationFrame(this.loop);
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(e) {
      if (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 13 || e.keyCode === 32) {
        e.preventDefault();
      }

      if (game.state === states.menuPlayers) {
        if (e.keyCode === 40) {
          game.numberOfPlayers = 2;
        } else if (e.keyCode === 38) {
          game.numberOfPlayers = 1;
        } else if (e.keyCode === 13 || e.keyCode === 32) {
          game.state = states.menuDifficulty;
        }
        return;
      }

      if (game.state === states.menuDifficulty) {
        if (e.keyCode === 40) {
          if (game.speed === difficulty.easy) {
            game.speed = difficulty.medium;
          } else if (game.speed === difficulty.medium) {
            game.speed = difficulty.hard;
          }
        } else if (e.keyCode === 38) {
          if (game.speed === difficulty.hard) {
            game.speed = difficulty.medium;
          } else if (game.speed === difficulty.medium) {
            game.speed = difficulty.easy;
          }
        } else if (e.keyCode === 13 || e.keyCode === 32) {
          newGame();
        }
        return;
      }

      if (game.state === states.gameOver) {
        if (e.keyCode === 40) {
          game.currentMenu = 'mainMenu';
        } else if (e.keyCode === 38) {
          game.currentMenu = 'playAgain';
        } else if (e.keyCode === 13 || e.keyCode === 32) {
          if (game.currentMenu === 'mainMenu') {
            game.state = states.menuPlayers;
          } else if (game.currentMenu === 'playAgain') {
            newGame();
          }
        }
        return;
      }

      game.snakes.forEach(function (snake) {
        if (snake.controlKeys[e.keyCode]) {
          e.preventDefault();
          var direction = snake.controlKeys[e.keyCode];

          switch (direction) {
            case 'left':
              if (snake.direction.previousX === 1) {
                // Don't allow going back in opposite direction
                return;
              }
              snake.direction.x = -1;
              snake.direction.y = 0;
              break;
            case 'up':
              if (snake.direction.previousY === 1) {
                // Don't allow going back in opposite direction
                return;
              }
              snake.direction.x = 0;
              snake.direction.y = -1;
              break;
            case 'right':
              if (snake.direction.previousX === -1) {
                // Don't allow going back in opposite direction
                return;
              }
              snake.direction.x = 1;
              snake.direction.y = 0;
              break;
            case 'down':
              if (snake.direction.previousY === -1) {
                // Don't allow going back in opposite direction
                return;
              }
              snake.direction.x = 0;
              snake.direction.y = 1;
              break;
          }
        }
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('keydown', this.handleKeyDown);
      this.init();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.handleKeyDown);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(
        'div',
        { style: styles.snake },
        React.createElement('canvas', { style: styles.snake__canvas, width: game.canvasSize, height: game.canvasSize, ref: function ref(el) {
            return _this2.canvas = el;
          } })
      );
    }
  }]);

  return NilssongamesSnake;
}(React.Component);

var _default = NilssongamesSnake;
export default _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(states, 'states', 'src/index.js');

  __REACT_HOT_LOADER__.register(difficulty, 'difficulty', 'src/index.js');

  __REACT_HOT_LOADER__.register(game, 'game', 'src/index.js');

  __REACT_HOT_LOADER__.register(newGame, 'newGame', 'src/index.js');

  __REACT_HOT_LOADER__.register(gameOver, 'gameOver', 'src/index.js');

  __REACT_HOT_LOADER__.register(NilssongamesSnake, 'NilssongamesSnake', 'src/index.js');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/index.js');
}();

;
