{"ast":null,"code":"import constants from './constants.js';\nvar states = constants.states,\n    difficulty = constants.difficulty; // Different values to give each snake a unique position/direction\n\nfunction snake(game) {\n  var color = ['#e2af3b', '#30AEA4'];\n  var offsetX = [15, 5];\n  var offsetY = [15, 5];\n  var tailOffsetX = [[18, 17, 16], [2, 3, 4]];\n  var directionX = [-1, 1];\n  var directionY = [0, 0];\n  var controls = [{\n    37: 'left',\n    38: 'up',\n    39: 'right',\n    40: 'down'\n  }, {\n    65: 'left',\n    87: 'up',\n    68: 'right',\n    83: 'down'\n  }]; // Fetch unique position/direction values depending on how many snakes are already on the board\n\n  var index = game.snakes.length;\n  this.index = index;\n  this.color = color[index];\n  this.width = game.board.width / 20;\n  this.height = this.width;\n  this.size = this.width;\n  this.speed = game.speed;\n  this.gameOver = false;\n  this.head = {\n    x: this.size * offsetX[index],\n    y: this.size * offsetY[index]\n  };\n  this.tail = [{\n    x: this.size * tailOffsetX[index][0],\n    y: this.head.y\n  }, {\n    x: this.size * tailOffsetX[index][1],\n    y: this.head.y\n  }, {\n    x: this.size * tailOffsetX[index][2],\n    y: this.head.y\n  }];\n  this.direction = {\n    x: directionX[index],\n    y: directionY[index],\n    previousX: directionX[index],\n    previousY: directionY[index]\n  };\n  this.controlKeys = controls[index];\n\n  this.move = function () {\n    this.direction.previousX = this.direction.x;\n    this.direction.previousY = this.direction.y;\n    var tail = this.tail;\n    var head = this.head;\n    tail.forEach(function (piece, i) {\n      var next = tail.length > i + 1 ? tail[i + 1] : head;\n\n      if (i === 0) {\n        if (next.x === piece.x && next.y === piece.y) {\n          // Snake just grew. Don't move the end of the tail\n          return;\n        }\n      }\n\n      piece.x = next.x;\n      piece.y = next.y;\n    });\n    head.x += this.direction.x * this.size;\n    head.y += this.direction.y * this.size;\n  };\n\n  this.grow = function () {\n    this.tail.unshift({\n      x: this.tail[0].x,\n      y: this.tail[0].y\n    });\n  };\n\n  this.draw = function (context) {\n    var _this = this;\n\n    var color = this.color;\n\n    if (game.state === states.gameOver && !this.gameOver) {\n      color = 'orange';\n    }\n\n    if (game.state === states.gameOver && this.gameOver) {\n      color = 'grey';\n    }\n\n    context.fillStyle = color;\n    context.fillRect(this.head.x + 1, this.head.y + 1, this.size - 2, this.size - 2);\n    this.tail.forEach(function (piece) {\n      context.fillRect(piece.x + 1, piece.y + 1, _this.size - 2, _this.size - 2);\n    });\n  };\n}\n\nvar _default = snake;\nexport default _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(states, 'states', 'src/snake.js');\n\n  __REACT_HOT_LOADER__.register(difficulty, 'difficulty', 'src/snake.js');\n\n  __REACT_HOT_LOADER__.register(snake, 'snake', 'src/snake.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/snake.js');\n}();\n\n;","map":null,"metadata":{},"sourceType":"module"}