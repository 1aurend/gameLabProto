{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Development/gameLabProto/src/components/mechanics/CenterPane.js\";\nimport React, { Component } from 'react';\nimport '../mechanics_grid.css';\nimport mechanicsList from './mechanicslist.js';\nimport { Link } from 'react-router-dom';\n\nfunction findMechanic(name) {\n  for (var i = 0; i < mechanicsList.length; i++) {\n    if (name === mechanicsList[i].name) {\n      return mechanicsList[i];\n    }\n  }\n\n  return {\n    name: 'coming soon!',\n    pitch: \"Mechanics are the interactions and relationships that make a game a system. Mechanics are what make a game interactive rather than entertainment you just take in. Put simply, mechanics are what make a game work. For this reason, designing with mechanics in mind is the key way teachers can apply the logic of game design to the classroom.\"\n  };\n}\n\nfunction CenterPane(props) {\n  var contentUp = findMechanic(props.mechanic);\n  var movesLinks = contentUp.moves ? contentUp.moves.map(function (move) {\n    return React.createElement(\"h5\", {\n      className: \"movesLinksText\",\n      onClick: props.onClick(move),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \" \\xA0\\xA0\\xA0\\xA0\", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, move));\n  }) : 'coming soon!';\n  var movesInText = contentUp.moves ? contentUp.moves.map(function (move) {\n    return React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, move);\n  }) : 'coming soon!';\n  var effects = contentUp.why ? contentUp.why.map(function (effect) {\n    return React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, effect);\n  }) : 'coming soon!';\n\n  if (props.mechanic === 'mechanics') {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"movesLinks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, movesLinks), React.createElement(\"div\", {\n      id: \"activeMech\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, contentUp.name), React.createElement(\"div\", {\n      id: \"centertext\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, contentUp.pitch)));\n  } else if (!props.move && props.mechanic != 'mechanics') {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"movesLinks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, movesLinks), React.createElement(\"div\", {\n      id: \"activeMech\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, contentUp.name), React.createElement(\"div\", {\n      id: \"centertext\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"The Pitch\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, contentUp.pitch), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"What is it?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, contentUp.what)));\n  } else if (props.move) {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"movesLinks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, movesLinks), React.createElement(\"div\", {\n      id: \"activeMech\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, props.move), React.createElement(\"div\", {\n      id: \"centertext\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"What is it?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, contentUp.pitch), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"What can it do and how?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, contentUp.what), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Examples\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, effects), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"How do I deploy it?\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, movesInText)));\n  }\n}\n\nexport default CenterPane;","map":{"version":3,"sources":["/Users/phil/Development/gameLabProto/src/components/mechanics/CenterPane.js"],"names":["React","Component","mechanicsList","Link","findMechanic","name","i","length","pitch","CenterPane","props","contentUp","mechanic","movesLinks","moves","map","move","onClick","movesInText","effects","why","effect","what"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport '../mechanics_grid.css'\nimport mechanicsList from './mechanicslist.js'\nimport { Link } from 'react-router-dom'\n\n\nfunction findMechanic (name) {\n  for (var i = 0; i < mechanicsList.length; i++) {\n    if (name === mechanicsList[i].name) {\n      return mechanicsList[i];\n    }\n  }\n  return ({\n    name: 'coming soon!',\n    pitch: \"Mechanics are the interactions and relationships that make a game a system. Mechanics are what make a game interactive rather than entertainment you just take in. Put simply, mechanics are what make a game work. For this reason, designing with mechanics in mind is the key way teachers can apply the logic of game design to the classroom.\",\n  })\n}\n\n\nfunction CenterPane (props) {\n\n  let contentUp = findMechanic(props.mechanic);\n\n  const movesLinks = contentUp.moves ? contentUp.moves.map((move) => <h5 className='movesLinksText' onClick={props.onClick(move)}> &nbsp;&nbsp;&nbsp;&nbsp;<span>{move}</span></h5> ) : 'coming soon!'\n  const movesInText = contentUp.moves ? contentUp.moves.map((move) => <li>{move}</li>) : 'coming soon!'\n  const effects = contentUp.why ? contentUp.why.map((effect) => <li>{effect}</li>) : 'coming soon!'\n\n  if (props.mechanic === 'mechanics') {\n    return (\n    <>\n      <div id='movesLinks'>\n        {movesLinks}\n      </div>\n      <div id='activeMech'>\n        {contentUp.name}\n      </div>\n      <div id=\"centertext\">\n        <p>{contentUp.pitch}</p>\n      </div>\n    </>\n    )\n  }\n\n  else if (!props.move && props.mechanic != 'mechanics') {\n\n    return (\n    <>\n      <div id='movesLinks'>\n        {movesLinks}\n      </div>\n      <div id='activeMech'>\n        {contentUp.name}\n      </div>\n      <div id=\"centertext\">\n        <h5>The Pitch</h5>\n        <p>{contentUp.pitch}</p>\n        <h5>What is it?</h5>\n        <p>{contentUp.what}</p>\n      </div>\n    </>\n    )\n  }\n\n  else if (props.move) {\n\n    return (\n    <>\n      <div id='movesLinks'>\n        {movesLinks}\n      </div>\n      <div id='activeMech'>\n        {props.move}\n      </div>\n      <div id=\"centertext\">\n        <h5>What is it?</h5>\n        <p>{contentUp.pitch}</p>\n        <h5>What can it do and how?</h5>\n        <p>{contentUp.what}</p>\n        <h5>Examples</h5>\n        <ul>{effects}</ul>\n        <h5>How do I deploy it?</h5>\n        <ul>{movesInText}</ul>\n      </div>\n    </>\n    )\n  }\n}\n\n\n\nexport default CenterPane;\n"]},"metadata":{},"sourceType":"module"}