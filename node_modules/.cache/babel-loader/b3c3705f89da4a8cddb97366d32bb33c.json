{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport _draw from './draw.js';\nimport snake from './snake.js';\nimport isCollision from './is-collision.js';\nimport apple from './apple.js';\nimport eatApple from './eat-apple.js';\nimport menu from './menu.js';\nimport constants from './constants.js';\nimport styles from './styles.js';\nvar states = constants.states,\n    difficulty = constants.difficulty;\nvar game = {\n  numberOfPlayers: 1,\n  gameOver: true,\n  speed: 2,\n  fps: 1000 / 30,\n  countdown: 3,\n  canvasSize: 300,\n  board: {\n    x: 0,\n    y: 30,\n    width: 300,\n    height: 270 // canvasSize - board.y\n\n  },\n  startTime: null,\n  time: 0,\n  lastInterval: 0,\n  snakes: [],\n  apples: [],\n  score: 0,\n  highScore: 0,\n  state: states.menuPlayers,\n  currentMenu: 'playAgain'\n};\n\nfunction newGame() {\n  game.snakes = [];\n  game.apples = [];\n  game.gameOver = false;\n  game.state = states.game;\n  game.score = 0;\n  game.startTime = null;\n}\n\nfunction gameOver() {\n  game.gameOver = true;\n  game.state = states.gameOver;\n\n  if (game.score > game.highScore) {\n    game.highScore = game.score;\n    game.currentMenu = 'playAgain';\n  }\n}\n\nvar NilssongamesSnake = function (_React$Component) {\n  _inherits(NilssongamesSnake, _React$Component);\n\n  function NilssongamesSnake() {\n    _classCallCheck(this, NilssongamesSnake);\n\n    var _this = _possibleConstructorReturn(this, (NilssongamesSnake.__proto__ || Object.getPrototypeOf(NilssongamesSnake)).call(this));\n\n    _this.loop = _this.loop.bind(_this);\n    return _this;\n  }\n\n  _createClass(NilssongamesSnake, [{\n    key: 'init',\n    value: function init() {\n      game.state = states.menuPlayers;\n      requestAnimationFrame(this.loop);\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      // All logic happens here, no canvas rendering\n      if (game.state !== states.game) {\n        return;\n      }\n\n      while (game.snakes.length < game.numberOfPlayers) {\n        // TODO: do forEach numberofplayers and send an index to get different starting coordinates\n        game.snakes.push(new snake(game));\n      }\n\n      if (!game.apples.length && game.numberOfPlayers === 1) {\n        game.apples.push(new apple(game));\n      }\n\n      if (game.countdown - parseInt(game.time / 1000) > 0) {\n        //start game only after countdown is finished\n        return;\n      } // Start moving the snake(s)\n\n\n      game.snakes.forEach(function (snake) {\n        if (isCollision(snake, game) || snake.gameOver) {\n          snake.gameOver = true;\n          gameOver();\n          return;\n        }\n\n        snake.move();\n\n        if (game.snakes.length > 1) {\n          // if more than one snake, ignore apples, and just grow the snake every move\n          snake.grow();\n          return;\n        }\n\n        game.apples.forEach(function (appleObj, i) {\n          if (eatApple(snake, appleObj)) {\n            game.apples[i] = new apple(game);\n            snake.grow();\n            game.score += game.speed;\n          }\n        });\n      });\n    }\n  }, {\n    key: 'draw',\n    value: function draw() {\n      // Render the canvas only, no variables should change\n      var canvasSize = game.canvasSize;\n      var context = this.canvas.getContext('2d');\n      context.clearRect(0, 0, canvasSize, canvasSize);\n\n      _draw.score(context, game);\n\n      if (game.state === states.menuPlayers || game.state === states.menuDifficulty) {\n        menu.draw(context, game);\n        return;\n      }\n\n      game.apples.forEach(function (apple) {\n        apple.draw(context);\n      });\n      game.snakes.forEach(function (snake) {\n        snake.draw(context);\n      });\n\n      if (game.state === states.gameOver) {\n        _draw.gameOver(context, game.canvasSize);\n\n        menu.draw(context, game);\n      }\n\n      _draw.countdown(context, game);\n    }\n  }, {\n    key: 'loop',\n    value: function loop(time) {\n      var fps = game.fps,\n          speed = game.speed;\n      time = parseInt(time);\n\n      if (!game.startTime) {\n        game.startTime = time;\n        game.lastInterval = time - game.startTime;\n      }\n\n      game.time = time - game.startTime;\n\n      if (game.time >= game.lastInterval + fps * (10 / speed)) {\n        game.lastInterval = game.time;\n        this.update();\n        this.draw();\n      }\n\n      requestAnimationFrame(this.loop);\n    }\n  }, {\n    key: 'handleKeyDown',\n    value: function handleKeyDown(e) {\n      if (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 13 || e.keyCode === 32) {\n        e.preventDefault();\n      }\n\n      if (game.state === states.menuPlayers) {\n        if (e.keyCode === 40) {\n          game.numberOfPlayers = 2;\n        } else if (e.keyCode === 38) {\n          game.numberOfPlayers = 1;\n        } else if (e.keyCode === 13 || e.keyCode === 32) {\n          game.state = states.menuDifficulty;\n        }\n\n        return;\n      }\n\n      if (game.state === states.menuDifficulty) {\n        if (e.keyCode === 40) {\n          if (game.speed === difficulty.easy) {\n            game.speed = difficulty.medium;\n          } else if (game.speed === difficulty.medium) {\n            game.speed = difficulty.hard;\n          }\n        } else if (e.keyCode === 38) {\n          if (game.speed === difficulty.hard) {\n            game.speed = difficulty.medium;\n          } else if (game.speed === difficulty.medium) {\n            game.speed = difficulty.easy;\n          }\n        } else if (e.keyCode === 13 || e.keyCode === 32) {\n          newGame();\n        }\n\n        return;\n      }\n\n      if (game.state === states.gameOver) {\n        if (e.keyCode === 40) {\n          game.currentMenu = 'mainMenu';\n        } else if (e.keyCode === 38) {\n          game.currentMenu = 'playAgain';\n        } else if (e.keyCode === 13 || e.keyCode === 32) {\n          if (game.currentMenu === 'mainMenu') {\n            game.state = states.menuPlayers;\n          } else if (game.currentMenu === 'playAgain') {\n            newGame();\n          }\n        }\n\n        return;\n      }\n\n      game.snakes.forEach(function (snake) {\n        if (snake.controlKeys[e.keyCode]) {\n          e.preventDefault();\n          var direction = snake.controlKeys[e.keyCode];\n\n          switch (direction) {\n            case 'left':\n              if (snake.direction.previousX === 1) {\n                // Don't allow going back in opposite direction\n                return;\n              }\n\n              snake.direction.x = -1;\n              snake.direction.y = 0;\n              break;\n\n            case 'up':\n              if (snake.direction.previousY === 1) {\n                // Don't allow going back in opposite direction\n                return;\n              }\n\n              snake.direction.x = 0;\n              snake.direction.y = -1;\n              break;\n\n            case 'right':\n              if (snake.direction.previousX === -1) {\n                // Don't allow going back in opposite direction\n                return;\n              }\n\n              snake.direction.x = 1;\n              snake.direction.y = 0;\n              break;\n\n            case 'down':\n              if (snake.direction.previousY === -1) {\n                // Don't allow going back in opposite direction\n                return;\n              }\n\n              snake.direction.x = 0;\n              snake.direction.y = 1;\n              break;\n          }\n        }\n      });\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('keydown', this.handleKeyDown);\n      this.init();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('keydown', this.handleKeyDown);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement('div', {\n        style: styles.snake\n      }, React.createElement('canvas', {\n        style: styles.snake__canvas,\n        width: game.canvasSize,\n        height: game.canvasSize,\n        ref: function ref(el) {\n          return _this2.canvas = el;\n        }\n      }));\n    }\n  }]);\n\n  return NilssongamesSnake;\n}(React.Component);\n\nvar _default = NilssongamesSnake;\nexport default _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(states, 'states', 'src/index.js');\n\n  __REACT_HOT_LOADER__.register(difficulty, 'difficulty', 'src/index.js');\n\n  __REACT_HOT_LOADER__.register(game, 'game', 'src/index.js');\n\n  __REACT_HOT_LOADER__.register(newGame, 'newGame', 'src/index.js');\n\n  __REACT_HOT_LOADER__.register(gameOver, 'gameOver', 'src/index.js');\n\n  __REACT_HOT_LOADER__.register(NilssongamesSnake, 'NilssongamesSnake', 'src/index.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/index.js');\n}();\n\n;","map":null,"metadata":{},"sourceType":"module"}