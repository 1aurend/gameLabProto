{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _pieces = require('./pieces.js');\n\nvar _pieces2 = _interopRequireDefault(_pieces);\n\nvar _colors = require('./colors.js');\n\nvar _colors2 = _interopRequireDefault(_colors);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction Piece() {\n  this.width = 20;\n  this.height = 20;\n  this.x = 5;\n  this.y = 0;\n  this.color = _colors2.default.getRandomColor();\n\n  this.getRandomPiece = function () {\n    return _pieces2.default[Math.floor(Math.random() * _pieces2.default.length)].piece;\n  };\n\n  this.grid = this.getRandomPiece();\n  this.gameOver = false;\n\n  this.draw = function (context) {\n    for (var row = 0; row < this.grid.length; row++) {\n      for (var col = 0; col < this.grid[row].length; col++) {\n        if (this.grid[row][col] !== 0) {\n          var x = (col + this.x) * this.width;\n          var y = (row + this.y) * this.height;\n          context.fillStyle = this.color;\n          context.fillRect(x + 1, y + 1, this.width - 2, this.height - 2);\n          context.fillStyle = 'rgba(255, 255, 255, 0.4)';\n          context.fillRect(x + 1, y + 1, this.width - 2, this.height - 18);\n          context.fillRect(x + 1, y + 1, this.width - 19, this.height - 1);\n          context.fillStyle = 'rgba(0, 0, 0, 0.4)';\n          context.fillRect(x + 1, y + 18, this.width - 2, this.height - 18);\n          context.fillRect(x + 18, y + 1, this.width - 19, this.height - 1);\n        }\n      }\n    }\n  };\n\n  this.rotateRight = function (board) {\n    var array = this.grid;\n    var newArray = array[0].map(function (col, i) {\n      return array.map(function (row) {\n        return row[i];\n      }).reverse();\n    });\n    this.grid = newArray;\n\n    while (this.isCollision(board)) {\n      this.x++;\n\n      if (this.x > 5) {\n        while (this.isCollision(board)) {\n          this.x--;\n\n          if (this.x < 1) {\n            this.grid = array;\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n  };\n\n  this.rotateLeft = function () {// rotate anti clockwise\n  };\n\n  this.generateNewPiece = function (board) {\n    this.x = 5;\n    this.y = 0;\n    this.grid = this.getRandomPiece();\n    this.color = _colors2.default.getRandomColor();\n\n    if (this.isCollision(board)) {\n      this.gameOver = true;\n      board.gameOver = true;\n    }\n  };\n\n  this.move = function (dir, board) {\n    if (this.gameOver) {\n      return;\n    }\n\n    var currentPositionX = this.x;\n\n    if (dir === 'down') {\n      this.drop(board);\n    } else if (dir === 'left') {\n      this.x--;\n\n      if (this.isCollision(board)) {\n        this.x++;\n      }\n    } else if (dir === 'right') {\n      this.x++;\n\n      if (this.isCollision(board)) {\n        this.x--;\n      }\n    }\n  };\n\n  this.drop = function (board) {\n    if (this.gameOver) {\n      return;\n    }\n\n    this.y++;\n\n    if (this.isCollision(board)) {\n      this.merge(board);\n      this.generateNewPiece(board);\n    }\n  };\n\n  this.isCollision = function (board) {\n    for (var row = 0; row < this.grid.length; row++) {\n      for (var col = 0; col < this.grid[row].length; col++) {\n        if (this.grid[row][col] === 1) {\n          // get the actual coordinates to check\n          var x = this.x + col;\n          var y = this.y + row;\n\n          if (!board.grid[y] || board.grid[y][x] !== 0) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  this.merge = function (board) {\n    // because we want to wait until it \"ticked\" one extra step before it's considered landing we have to move it back up one step to merge it in the right place\n    this.y--;\n\n    for (var row = 0; row < this.grid.length; row++) {\n      for (var col = 0; col < this.grid[row].length; col++) {\n        if (this.grid[row][col] === 1) {\n          var x = this.x + col;\n          var y = this.y + row;\n          board.grid[y][x] = this.color;\n        }\n      }\n    }\n  };\n\n  this.update = function (board) {\n    this.drop(board);\n  };\n}\n\nexports.default = Piece;","map":null,"metadata":{},"sourceType":"script"}