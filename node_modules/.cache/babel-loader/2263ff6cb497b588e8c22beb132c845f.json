{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.animate = animate;\nexports.changeDirection = changeDirection;\n\nvar _movement = require('./movement');\n\nvar _monster = require('./monster');\n\nvar _player = require('./player');\n\nfunction collectEatenMonsterScores(newState, oldState) {\n  var scoreDelta = newState.monsters.reduce(function (sum, _ref, index) {\n    var deadTime = _ref.deadTime;\n    return sum + 1000 * ((deadTime > 0 && oldState.monsters[index].deadTime === 0) >> 0);\n  }, 0);\n  return _extends({}, newState, {\n    score: newState.score + scoreDelta\n  });\n}\n\nfunction animate(state) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$time = _ref2.time,\n      time = _ref2$time === undefined ? Date.now() : _ref2$time; // get the next game state as a function of time\n\n\n  var timeSeconds = (time - state.stepTime) / 1000;\n\n  if (state.lost) {\n    return state;\n  }\n\n  var statePlayerAnimated = (0, _player.animatePlayer)(_extends({}, state, {\n    stepTime: time\n  }), timeSeconds);\n  var stateMonstersAnimated = (0, _monster.animateMonsters)(statePlayerAnimated, timeSeconds, state.player);\n  var stateEatenMonsters = collectEatenMonsterScores(stateMonstersAnimated, state);\n  return stateEatenMonsters;\n}\n\nfunction changeDirection(state, _ref3) {\n  var direction = _ref3.direction;\n  var orderPolarityOld = (0, _movement.orderPolarity)(state.player.direction);\n  var orderPolarityNew = (0, _movement.orderPolarity)(direction);\n\n  if (orderPolarityOld.plane === orderPolarityNew.plane) {\n    return _extends({}, state, {\n      player: _extends({}, state.player, {\n        direction: direction,\n        nextDirection: direction\n      })\n    });\n  }\n\n  return _extends({}, state, {\n    player: _extends({}, state.player, {\n      nextDirection: direction\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"script"}