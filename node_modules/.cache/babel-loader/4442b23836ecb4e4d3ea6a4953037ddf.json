{"ast":null,"code":"import _defineProperty from \"/Users/phil/Development/gameLabProto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/phil/Development/gameLabProto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/phil/Development/gameLabProto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/phil/Development/gameLabProto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/phil/Development/gameLabProto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/phil/Development/gameLabProto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/phil/Development/gameLabProto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/phil/Development/gameLabProto/src/components/mechanics/MechanicsGrid.js\";\nimport React, { Component } from 'react';\nimport { Switch, Link, Route } from 'react-router-dom';\nimport '../grids.css';\nimport '../mechanics_grid.css';\nimport DiceNav from '../dice_nav/DiceNav.js';\nimport gameLab from \"../../assets/dev_subtitle.svg\";\nimport CenterPane from './CenterPane.js';\nimport ChallengePane from '../subpages/ChallengePane.js';\nimport timesvg from \"../../assets/time.svg\";\nimport spacesvg from \"../../assets/space.svg\";\nimport actionsvg from \"../../assets/action.svg\";\nimport chancesvg from \"../../assets/chance.svg\";\nimport challengesvg from \"../../assets/challenge.svg\";\nimport strategysvg from \"../../assets/strategy.svg\";\nimport multiplayersvg from \"../../assets/multiplayer.svg\";\nimport trainingsvg from \"../../assets/training.svg\";\nimport timesvg_invert from \"../../assets/time_invert.svg\";\nimport spacesvg_invert from \"../../assets/space_invert.svg\";\nimport actionsvg_invert from \"../../assets/action_invert.svg\";\nimport chancesvg_invert from \"../../assets/chance_invert.svg\";\nimport challengesvg_invert from \"../../assets/challenge_invert.svg\";\nimport strategysvg_invert from \"../../assets/strategy_invert.svg\";\nimport multiplayersvg_invert from \"../../assets/multiplayer_invert.svg\";\nimport trainingsvg_invert from \"../../assets/training_invert.svg\";\n\nvar MechanicsGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MechanicsGrid, _Component);\n\n  function MechanicsGrid(props) {\n    var _this;\n\n    _classCallCheck(this, MechanicsGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MechanicsGrid).call(this, props));\n\n    _this.onClickMove = function (move) {\n      return function (e) {\n        _this.setState({\n          activeMove: move\n        });\n      };\n    };\n\n    _this.state = {\n      activeMech: props.mechanic,\n      activeMove: false\n    };\n    _this.onClickMech = _this.onClickMech.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onClickMove = _this.onClickMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MechanicsGrid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.location !== prevProps.location) {\n        this.setState({\n          activeMech: this.props.mechanic\n        });\n      }\n    }\n  }, {\n    key: \"onClickMech\",\n    value: function onClickMech(mech) {\n      this.setState({\n        activeMove: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var center;\n      var background = this.props.backgroundColor;\n      var title;\n      var linkPath;\n\n      if (this.props.dChallenges) {\n        center = React.createElement(ChallengePane, {\n          mechanic: this.state.activeMech,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        });\n        title = 'design challenges';\n        linkPath = '/tools/challenges/';\n      } else {\n        center = React.createElement(CenterPane, {\n          mechanic: this.state.activeMech,\n          move: this.state.activeMove,\n          onClick: function onClick(e) {\n            return _this2.onClickMove(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        });\n        title = 'the mechanics';\n        linkPath = '/mechanics/';\n      }\n\n      var gridColors = {\n        time: {\n          font: '#fcf5eb',\n          svg: timesvg,\n          invsvg: timesvg_invert\n        },\n        space: {\n          font: '#fcf5eb',\n          svg: spacesvg,\n          invsvg: spacesvg_invert\n        },\n        chance: _defineProperty({\n          font: '#fcf5eb',\n          svg: chancesvg\n        }, \"svg\", chancesvg_invert),\n        action: {\n          font: '#fcf5eb',\n          svg: actionsvg\n        },\n        challenge: {\n          font: '#fcf5eb',\n          svg: challengesvg\n        },\n        training: {\n          font: '#fcf5eb',\n          svg: trainingsvg\n        },\n        strategy: {\n          font: '#fcf5eb',\n          svg: strategysvg\n        },\n        multiplayer: {\n          font: '#fcf5eb',\n          svg: multiplayersvg\n        }\n      };\n\n      for (var i = 0; i < Object.keys(gridColors).length; i++) {\n        if (this.state.activeMech === Object.keys(gridColors)[i] && !this.props.dChallenges) {\n          var key = Object.keys(gridColors)[i];\n          gridColors[key]['font'] = '#7fc8a0';\n          gridColors[key]['svg'] = gridColors[key]['invsvg'];\n          console.log(gridColors[key]['svg']);\n        } else if (this.state.activeMech === Object.keys(gridColors)[i] && this.props.dChallenges) {\n          var _key = Object.keys(gridColors)[i];\n          gridColors[_key]['font'] = '#e2af3b';\n        }\n      }\n\n      var fontColor = ['', '', '', '', '', '', '', ''];\n      fontColor.fill('#fcf5eb', 0, 8);\n      var theMechanics = ['time', 'space', 'chance', 'action', 'challenge', 'training', 'strategy', 'multiplayer'];\n\n      for (var i = 0; i < theMechanics.length; i++) {\n        if (this.state.activeMech === theMechanics[i] && !this.props.dChallenges) {\n          fontColor[i] = '#7fc8a0';\n        } else if (this.state.activeMech === theMechanics[i] && this.props.dChallenges) {\n          fontColor[i] = '#e2af3b';\n        }\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"biggrid\",\n        style: {\n          backgroundColor: background\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"mechanicstitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: gameLab,\n        alt: \"gameLab\",\n        className: \"gameLab\",\n        style: {\n          maxHeight: '50%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"pageTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: background\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, title))), React.createElement(\"div\", {\n        id: \"diceNav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(DiceNav, {\n        path: this.props.location.pathname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"centerPane\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, center), React.createElement(\"div\", {\n        id: \"mechanic1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: gridColors.time.svg,\n        alt: \"hourglass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"mechLink\",\n        to: linkPath + 'time',\n        onClick: function onClick(e) {\n          return _this2.onClickMech('time', e);\n        },\n        style: {\n          color: gridColors.time.font\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Time\")), React.createElement(\"div\", {\n        id: \"mechanic2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: gridColors.space.svg,\n        alt: \"checkerboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"mechLink\",\n        to: linkPath + 'space',\n        onClick: function onClick(e) {\n          return _this2.onClickMech('space', e);\n        },\n        style: {\n          color: gridColors.space.font\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Space\")), React.createElement(\"div\", {\n        id: \"mechanic3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: chancesvg,\n        alt: \"hand of cards\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"mechLink\",\n        to: linkPath + 'chance',\n        onClick: function onClick(e) {\n          return _this2.onClickMech('chance', e);\n        },\n        style: {\n          color: fontColor[2]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Chance\")), React.createElement(\"div\", {\n        id: \"mechanic4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: actionsvg,\n        alt: \"dominos\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"mechLink\",\n        to: linkPath + 'action',\n        onClick: function onClick(e) {\n          return _this2.onClickMech('action', e);\n        },\n        style: {\n          color: fontColor[3]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Action\")), React.createElement(\"div\", {\n        id: \"mechanic5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: challengesvg,\n        alt: \"mountain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"mechLink\",\n        to: linkPath + 'challenge',\n        onClick: function onClick(e) {\n          return _this2.onClickMech('challenge', e);\n        },\n        style: {\n          color: fontColor[4]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Challenge\")), React.createElement(\"div\", {\n        id: \"mechanic6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: trainingsvg,\n        alt: \"checkerboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"mechLink\",\n        to: linkPath + 'training',\n        onClick: function onClick(e) {\n          return _this2.onClickMech('training', e);\n        },\n        style: {\n          color: fontColor[5]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Training\")), React.createElement(\"div\", {\n        id: \"mechanic7\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: strategysvg,\n        alt: \"chess knight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"mechLink\",\n        to: linkPath + 'strategy',\n        onClick: function onClick(e) {\n          return _this2.onClickMech('strategy', e);\n        },\n        style: {\n          color: fontColor[6]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Strategy\")), React.createElement(\"div\", {\n        id: \"mechanic8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: multiplayersvg,\n        alt: \"controllers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(Link, {\n        className: \"mechLink\",\n        to: linkPath + 'multiplayer',\n        onClick: function onClick(e) {\n          return _this2.onClickMech('multiplayer', e);\n        },\n        style: {\n          color: fontColor[7]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Multiplayer\"))));\n    }\n  }]);\n\n  return MechanicsGrid;\n}(Component);\n\nexport default MechanicsGrid;","map":{"version":3,"sources":["/Users/phil/Development/gameLabProto/src/components/mechanics/MechanicsGrid.js"],"names":["React","Component","Switch","Link","Route","DiceNav","CenterPane","ChallengePane","MechanicsGrid","props","onClickMove","move","e","setState","activeMove","state","activeMech","mechanic","onClickMech","bind","prevProps","prevState","location","mech","center","background","backgroundColor","title","linkPath","dChallenges","gridColors","time","font","svg","timesvg","invsvg","timesvg_invert","space","spacesvg","spacesvg_invert","chance","chancesvg","chancesvg_invert","action","actionsvg","challenge","challengesvg","training","trainingsvg","strategy","strategysvg","multiplayer","multiplayersvg","i","Object","keys","length","key","console","log","fontColor","fill","theMechanics","gameLab","maxHeight","color","pathname"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Switch, Link, Route } from 'react-router-dom';\nimport '../grids.css'\nimport '../mechanics_grid.css'\nimport DiceNav from '../dice_nav/DiceNav.js'\nimport gameLab from '../../assets/dev_subtitle.svg'\nimport CenterPane from './CenterPane.js'\nimport ChallengePane from '../subpages/ChallengePane.js'\nimport timesvg from '../../assets/time.svg'\nimport spacesvg from '../../assets/space.svg'\nimport actionsvg from '../../assets/action.svg'\nimport chancesvg from '../../assets/chance.svg'\nimport challengesvg from '../../assets/challenge.svg'\nimport strategysvg from '../../assets/strategy.svg'\nimport multiplayersvg from '../../assets/multiplayer.svg'\nimport trainingsvg from '../../assets/training.svg'\nimport timesvg_invert from '../../assets/time_invert.svg'\nimport spacesvg_invert from '../../assets/space_invert.svg'\nimport actionsvg_invert from '../../assets/action_invert.svg'\nimport chancesvg_invert from '../../assets/chance_invert.svg'\nimport challengesvg_invert from '../../assets/challenge_invert.svg'\nimport strategysvg_invert from '../../assets/strategy_invert.svg'\nimport multiplayersvg_invert from '../../assets/multiplayer_invert.svg'\nimport trainingsvg_invert from '../../assets/training_invert.svg'\n\n\nclass MechanicsGrid extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      activeMech: props.mechanic,\n      activeMove: false,\n    }\n    this.onClickMech = this.onClickMech.bind(this)\n    this.onClickMove = this.onClickMove.bind(this)\n\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n  if (this.props.location !== prevProps.location) {\n     this.setState({activeMech: this.props.mechanic})\n  }\n}\n\n  onClickMech(mech){\n    this.setState(\n      {\n        activeMove: false,\n      }\n    );\n  }\n\n  onClickMove = (move) => (e) => {\n    this.setState(\n      {\n        activeMove: move,\n      }\n    )\n  }\n\n\n  render() {\n\n    let center\n    let background = this.props.backgroundColor\n    let title\n    let linkPath\n    if (this.props.dChallenges) {\n      center = <ChallengePane mechanic={this.state.activeMech} />\n      title = 'design challenges'\n      linkPath = '/tools/challenges/'\n    }\n    else {\n      center = <CenterPane mechanic={this.state.activeMech} move={this.state.activeMove} onClick={(e) => this.onClickMove(e)} />\n      title = 'the mechanics'\n      linkPath = '/mechanics/'\n    }\n\n    let gridColors = {\n      time: {\n        font: '#fcf5eb',\n        svg: timesvg,\n        invsvg: timesvg_invert\n      },\n      space: {\n        font: '#fcf5eb',\n        svg: spacesvg,\n        invsvg: spacesvg_invert\n      },\n      chance: {\n        font: '#fcf5eb',\n        svg: chancesvg,\n        svg: chancesvg_invert,\n      },\n      action: {\n        font: '#fcf5eb',\n        svg: actionsvg,\n      },\n      challenge: {\n        font: '#fcf5eb',\n        svg: challengesvg,\n      },\n      training: {\n        font: '#fcf5eb',\n        svg: trainingsvg,\n      },\n      strategy: {\n        font: '#fcf5eb',\n        svg: strategysvg,\n      },\n      multiplayer: {\n        font: '#fcf5eb',\n        svg: multiplayersvg,\n      },\n    }\n\n    for (var i = 0; i < Object.keys(gridColors).length; i++) {\n        if (this.state.activeMech === Object.keys(gridColors)[i] && !this.props.dChallenges) {\n          let key = Object.keys(gridColors)[i]\n          gridColors[key]['font'] = '#7fc8a0'\n          gridColors[key]['svg'] = gridColors[key]['invsvg']\n          console.log(gridColors[key]['svg']);\n        }\n        else if (this.state.activeMech === Object.keys(gridColors)[i] && this.props.dChallenges) {\n          let key = Object.keys(gridColors)[i]\n          gridColors[key]['font'] = '#e2af3b'\n        }\n    }\n\n    let fontColor = ['','','','','','','','']\n    fontColor.fill('#fcf5eb', 0, 8)\n    let theMechanics = ['time', 'space', 'chance', 'action', 'challenge', 'training', 'strategy', 'multiplayer']\n    for (var i = 0; i < theMechanics.length; i++) {\n        if (this.state.activeMech === theMechanics[i] && !this.props.dChallenges) {\n          fontColor[i] = '#7fc8a0'\n        }\n        else if (this.state.activeMech === theMechanics[i] && this.props.dChallenges) {\n          fontColor[i] = '#e2af3b'\n        }\n    }\n\n\n  return (\n    <div>\n      <div className=\"biggrid\" style={{backgroundColor: background}}>\n        <div id='mechanicstitle'>\n          <img src={gameLab} alt='gameLab' className='gameLab' style={{maxHeight: '50%'}}/>\n          <div className='pageTitle'><h1 style={{color: background}}>{title}</h1></div>\n        </div>\n        <div id='diceNav'>\n          <DiceNav path={this.props.location.pathname}/>\n        </div>\n        <div id='centerPane'>\n          {center}\n        </div>\n        <div id='mechanic1'>\n          <img src={gridColors.time.svg} alt='hourglass' />\n          <Link className=\"mechLink\" to={linkPath + 'time'} onClick={(e) => this.onClickMech('time', e)} style={{color: gridColors.time.font}}>Time</Link>\n        </div>\n        <div id=\"mechanic2\">\n          <img src={gridColors.space.svg} alt='checkerboard' />\n          <Link className=\"mechLink\" to={linkPath + 'space'} onClick={(e) => this.onClickMech('space', e)} style={{color: gridColors.space.font}}>Space</Link>\n        </div>\n        <div id='mechanic3'>\n          <img src={chancesvg} alt='hand of cards' />\n          <Link className=\"mechLink\" to={linkPath + 'chance'} onClick={(e) => this.onClickMech('chance', e)} style={{color: fontColor[2]}}>Chance</Link>\n        </div>\n        <div id=\"mechanic4\">\n          <img src={actionsvg} alt='dominos' />\n          <Link className=\"mechLink\" to={linkPath + 'action'} onClick={(e) => this.onClickMech('action', e)} style={{color: fontColor[3]}}>Action</Link>\n        </div>\n        <div id=\"mechanic5\">\n          <img src={challengesvg} alt='mountain' />\n          <Link className=\"mechLink\" to={linkPath + 'challenge'} onClick={(e) => this.onClickMech('challenge', e)} style={{color: fontColor[4]}}>Challenge</Link>\n        </div>\n        <div id=\"mechanic6\">\n          <img src={trainingsvg} alt='checkerboard' />\n          <Link className=\"mechLink\" to={linkPath + 'training'} onClick={(e) => this.onClickMech('training', e)} style={{color: fontColor[5]}}>Training</Link>\n        </div>\n        <div id=\"mechanic7\">\n          <img src={strategysvg} alt='chess knight' />\n          <Link className=\"mechLink\" to={linkPath + 'strategy'} onClick={(e) => this.onClickMech('strategy', e)} style={{color: fontColor[6]}}>Strategy</Link>\n        </div>\n        <div id=\"mechanic8\">\n          <img src={multiplayersvg} alt='controllers' />\n          <Link className=\"mechLink\" to={linkPath + 'multiplayer'}onClick={(e) => this.onClickMech('multiplayer', e)} style={{color: fontColor[7]}}>Multiplayer</Link>\n        </div>\n      </div>\n</div>\n  );\n}\n}\n\nexport default (MechanicsGrid);\n"]},"metadata":{},"sourceType":"module"}