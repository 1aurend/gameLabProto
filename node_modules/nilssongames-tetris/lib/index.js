'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _piece = require('./piece.js');

var _piece2 = _interopRequireDefault(_piece);

var _board = require('./board.js');

var _board2 = _interopRequireDefault(_board);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var game = {
  lastInterval: 0,
  timeBetweenUpdates: 1000,
  timeSinceLastUpdate: 0,
  piece: new _piece2.default(),
  board: new _board2.default(),
  gameOver: false,
  paused: true,
  controlKeys: {
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down'
  },
  context: null
};

function draw() {
  game.board.draw(game.context);
  game.piece.draw(game.context);
}

function update() {
  game.piece.update(game.board);
}

function loop() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  var deltaTime = time - game.lastInterval;
  game.lastInterval = time;
  game.timeSinceLastUpdate += deltaTime;

  if (game.timeSinceLastUpdate > game.timeBetweenUpdates) {
    update();
    game.timeSinceLastUpdate = 0;
  }

  draw();
  requestAnimationFrame(loop);
}

function handleKeyDown(e) {
  var dir = game.controlKeys[e.keyCode];

  if (dir) {
    e.preventDefault();
    game.piece.move(dir, game.board);

    if (dir === 'down') {
      game.timeSinceLastUpdate = 0;
    } else if (dir === 'up') {
      game.piece.rotateRight(game.board);
    }
  }
}

var NilssongamesTetris = function (_Component) {
  _inherits(NilssongamesTetris, _Component);

  function NilssongamesTetris() {
    _classCallCheck(this, NilssongamesTetris);

    return _possibleConstructorReturn(this, (NilssongamesTetris.__proto__ || Object.getPrototypeOf(NilssongamesTetris)).apply(this, arguments));
  }

  _createClass(NilssongamesTetris, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      game.context = this.canvas.getContext('2d');
      // Don't attatch eventlisteners directly to the DOM element because we can't rely on the element being focused
      window.addEventListener('keydown', handleKeyDown);
      loop();
    }
  }, {
    key: 'componentWillUnMount',
    value: function componentWillUnMount() {
      window.removeEventListener('keydown', handleKeyDown);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement('canvas', {
        width: game.board.width,
        height: game.board.height,
        ref: function ref(el) {
          return _this2.canvas = el;
        }
      });
    }
  }]);

  return NilssongamesTetris;
}(_react.Component);

exports.default = NilssongamesTetris;